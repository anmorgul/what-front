import groovy.json.JsonSlurper;
pipeline {
    environment {
        NEXUS_CREDENTIAL_ID = "nexus_admin_id"
		telegramToken = credentials('telegramToken')
		telegram_bot_name = credentials('telegram_bot_name')
		telegram_channel_id = credentials('telegram_channel_id')
		CDD_APPLICATION_VERSION_NAME = "${env.GIT_BRANCH}"
		template_msg = "*Build* $JOB_NAME"
    }
	agent { label 'nodejs'}
	stages {
		stage("ls") {
			steps {
				withCredentials([
					string(credentialsId: 'telegramToken', variable: 'telegramToken'),
					string(credentialsId: 'telegram_bot_name', variable: 'telegram_bot_name'),
					string(credentialsId: 'telegram_channel_id', variable: 'telegram_channel_id')
					]) {
          			sh ('curl -s -X POST https://api.telegram.org/bot$telegramToken/sendMessage \
					  	-d chat_id=$telegram_channel_id \
						-d parse_mode=markdown \
						-d text="*Build:*\n${JOB_NAME}\n*Process*:[inline URL](${JOB_DISPLAY_URL})\n*Git commit:*\n${GIT_COMMIT}"')
				}
			}
		}
		stage("Stage npm install") {
			steps {
				sh 'npm install'
				println "${env.BRANCH_NAME}"
			}
		}
		stage("Stage build") {
			steps {
				sh 'npm run build'
			}
		}
		// stage("Stage eslint + test") {
		// 	parallel {
		// 		stage("Stage eslint") {
		// 			steps {
		// 				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		// 						sh 'npx eslint .'
		// 					}
		// 				}
		// 			}
		// 		stage("Stage test") {
		// 			steps {
		// 				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		// 						sh 'npm run test'
		// 					}
		// 				}
		// 			}
		// 		}
		// 	}
		// stage('SonarQube analysis') {
		// 	environment {
		// 		def scannerHome = tool 'SonarQubeScannerMaven';
		// 	}
		// 	steps {
		// 		withSonarQubeEnv('SonarQube9000') {
		// 			withCredentials([string(credentialsId: 'sonarProjectKey', variable: 'sonarProjectKey')]) {
		// 				echo "${sonarProjectKey}"
		// 				sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=jenkins_what_front -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
		// 			}
		// 		}
		// 	}
		// }
		// stage("Quality Gate") {
		// 	steps {
		// 		timeout(time: 1, unit: 'HOURS') {
		// 			waitForQualityGate abortPipeline: true
		// 		}
		// 	}
		// }
		stage("to nexus") {
			steps {
				script {
					def version = readJSON file: './package.json'
					zip zipFile: 'dist.zip', archive: false, dir: 'dist', overwrite: true
					nexusArtifactUploader(
						nexusVersion: 'nexus3',
						protocol: 'http',
						nexusUrl: '192.168.1.77:8081',
						groupId: version.name,
						version: version.version+ '-rc' + BUILD_ID + "." + GIT_COMMIT.take(6),
						repository: 'what_raw_repo',
						credentialsId: NEXUS_CREDENTIAL_ID,
						artifacts: [
							[artifactId: BRANCH_NAME,
							classifier: 'debug',
							file: 'dist.zip',
							type: 'zip']
						]
					);
				}
			}
		}
		stage("by branch") {
			parallel {
				stage('branch is master') {
					when {
						branch 'fakemaster'
					}
					steps {
						echo "branch fakemaster"
						withCredentials([
							usernamePassword(credentialsId: 'nexus_admin_id', passwordVariable: 'NEXUS_PASS', usernameVariable: 'NEXUS_USER'),
							]) {
							script {
								artifactPath = "http://192.168.1.77:8081/repository/what_raw_repo/what/fakedev/1.0.0-rc${BUILD_ID}.${GIT_COMMIT.take(6)}/fakedev-1.0.0-rc${BUILD_ID}.${GIT_COMMIT.take(6)}-debug.zip"
								ansiblePlaybook(
									credentialsId: 'dev_ssh_key', 
									playbook: 'jenkins/deploy_master_dev.yml', 
									inventory: 'jenkins/hosts.ini',
									extras: '-vvv',
									extraVars: [
										nexus_url: artifactPath,
										nexus_user: NEXUS_USER,
										nexus_pass: NEXUS_PASS
									]
								)
							}
						}
					}
				}
				stage('branch is dev') {
					when {
						branch 'fakedev'
					}
					steps {
						echo "branch fakedev"
						withCredentials([
							usernamePassword(credentialsId: 'nexus_admin_id', passwordVariable: 'NEXUS_PASS', usernameVariable: 'NEXUS_USER'),
							]) {
							script {
								artifactPath = "http://192.168.1.77:8081/repository/what_raw_repo/what/fakedev/1.0.0-rc${BUILD_ID}.${GIT_COMMIT.take(6)}/fakedev-1.0.0-rc${BUILD_ID}.${GIT_COMMIT.take(6)}-debug.zip"
								ansiblePlaybook(
									credentialsId: 'dev_ssh_key', 
									playbook: 'jenkins/deploy_dev.yml', 
									inventory: 'jenkins/hosts.ini',
									extraVars: [
										nexus_url: artifactPath,
										nexus_user: NEXUS_USER,
										nexus_pass: NEXUS_PASS
									]
								)
							}
						}
					}
				}
			}
		}
  	}
	post {
		always {
        	echo "Stage finished"
			script {
    			TMSG = "<p>*job name*= $JOB_NAME</p>\n*git commit*= $GIT_COMMIT \n*result*= $JOB_DISPLAY_URL"
				echo  TMSG 
				telegramSend(message: "*finished* " + TMSG, chatId: -1001721361023)
   			}
        }
		success {
			echo  "success " + TMSG 
			telegramSend(message: "*success* " + TMSG, chatId: -1001721361023)
		}
		aborted {   
			echo  "aborted " + TMSG           
			telegramSend(message: "*aborted* " + TMSG, chatId: -1001721361023)
		}
		failure {
			echo  "failure " + TMSG 
			telegramSend(message: "*failure* " + TMSG, chatId: -1001721361023)
		}
	}
}
