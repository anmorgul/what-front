pipeline {
	agent { label 'nodejs'}
	stages {
		stage("ls") {
			steps {
				sh 'pwd'
				sh 'ls'
			}
		}
		stage("Stage npm install") {
			steps {
				sh 'npm install'
				println "${env.BRANCH_NAME}"
			}
		}
		stage("Stage eslint + test") {
			parallel {
				stage("Stage eslint") {
					steps {
						catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh 'npx eslint .'
							}
						}
					}
				stage("Stage test") {
					steps {
						catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
								sh 'npm run test'
							}
						}
					}
				}
			}
		stage("Stage build") {
			steps {
				sh 'npm run build'
			}
		}
		stage('SonarQube analysis') {
			environment {
				def scannerHome = tool 'SonarQubeScannerMaven';
			}
			steps {
				withSonarQubeEnv('SonarQube9000') {
					withCredentials([string(credentialsId: 'sonartoken', variable: 'sonartoken')]) {
						sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${sonartoken}"
					}
				}
				// -Dsonar.login=66c6d51eb60150c34139d8552ba6e3afb1be3df4
				// -Dsonar.projectKey=${sonartoken}
			}
		}
		stage("Quality Gate") {
			steps {
				timeout(time: 1, unit: 'HOURS') {
					waitForQualityGate abortPipeline: true
				}
			}
		}
		// stage('Deploy Master') {
		// 	when {expression { env.BRANCH_NAME == 'master' }}
		// 		steps {
		// 		  sh '''
        //                            #!/bin/bash
        //                            echo Deploying in master....
        //                            '''
		// 		}
		// }
  	}
}
