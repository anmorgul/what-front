import groovy.json.JsonSlurper;
pipeline {
    environment {
        // NEXUS_VERSION = "nexus3"
        // NEXUS_PROTOCOL = "http"
        // NEXUS_URL = "you-ip-addr-here:8081"
        // NEXUS_REPOSITORY = "maven-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus_admin_id"
    }
	agent { label 'nodejs'}
	stages {
		stage("ls") {
			steps {
				sh 'pwd'
				sh 'ls'
			}
		}
		// stage("Stage npm install") {
		// 	steps {
		// 		sh 'npm install'
		// 		println "${env.BRANCH_NAME}"
		// 	}
		// }
		// stage("Stage eslint + test") {
		// 	parallel {
		// 		stage("Stage eslint") {
		// 			steps {
		// 				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		// 						sh 'npx eslint .'
		// 					}
		// 				}
		// 			}
		// 		stage("Stage test") {
		// 			steps {
		// 				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
		// 						sh 'npm run test'
		// 					}
		// 				}
		// 			}
		// 		}
		// 	}
		// stage("Stage build") {
		// 	steps {
		// 		sh 'npm run build'
		// 	}
		// }
		// stage('SonarQube analysis') {
		// 	environment {
		// 		def scannerHome = tool 'SonarQubeScannerMaven';
		// 	}
		// 	steps {
		// 		withSonarQubeEnv('SonarQube9000') {
		// 			withCredentials([string(credentialsId: 'sonarProjectKey', variable: 'sonarProjectKey')]) {
		// 				echo "${sonarProjectKey}"
		// 				sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=jenkins_what_front"
		// 			}
		// 		}
		// 		// -Dsonar.login=66c6d51eb60150c34139d8552ba6e3afb1be3df4
		// 		// -Dsonar.projectKey=${sonartoken}
		// 	}
		// }
		// stage("Quality Gate") {
		// 	steps {
		// 		timeout(time: 1, unit: 'HOURS') {
		// 			waitForQualityGate abortPipeline: true
		// 		}
		// 	}
		// }
		stage('branch is master') {
            when {
                branch 'fakemaster'
            }
            steps {
				echo "branch fakemaster"
            }
        }
		stage('branch is dev') {
            when {
                branch 'fakedev'
            }
            steps {
				echo "branch fakedev"
            }
        }
		// stage('Deploy Master') {
		// 	when {expression { env.BRANCH_NAME == 'master' }}
		// 		steps {
		// 		  sh '''
        //                            #!/bin/bash
        //                            echo Deploying in master....
        //                            '''
		// 		}
		// }
		stage('ttt') {
            steps {
				sh '''
				echo "BRANCH_NAME ${BRANCH_NAME}"
				echo "CHANGE_ID ${CHANGE_ID}"
				echo "CHANGE_URL ${CHANGE_URL}"
				echo "CHANGE_TITLE ${CHANGE_TITLE}"
				echo "CHANGE_AUTHOR ${CHANGE_AUTHOR}"
				echo "CHANGE_AUTHOR_DISPLAY_NAME ${CHANGE_AUTHOR_DISPLAY_NAME}"
				echo "CHANGE_AUTHOR_EMAIL ${CHANGE_AUTHOR_EMAIL}"
				echo "CHANGE_TARGET ${CHANGE_TARGET}"
				echo "CHANGE_BRANCH ${CHANGE_BRANCH}"
				echo "CHANGE_FORK ${CHANGE_FORK}"
				echo "TAG_NAME ${TAG_NAME}"
				echo "JOB_DISPLAY_URL ${JOB_DISPLAY_URL}"
				echo "RUN_DISPLAY_URL ${RUN_DISPLAY_URL}"
				echo "BUILD_NUMBER ${BUILD_NUMBER}"
				echo "BUILD_ID ${BUILD_ID}"
				echo "BUILD_DISPLAY_NAME ${BUILD_DISPLAY_NAME}"
				echo "JOB_NAME ${JOB_NAME}"
				echo "JOB_BASE_NAME ${JOB_BASE_NAME}"
				echo "BUILD_TAG ${BUILD_TAG}"
				echo "EXECUTOR_NUMBER ${EXECUTOR_NUMBER}"
				echo "NODE_NAME ${NODE_NAME}"
				echo "NODE_LABELS ${NODE_LABELS}"



				echo "GIT_COMMIT ${GIT_COMMIT}"
				echo "GIT_BRANCH ${GIT_BRANCH}"
				echo "GIT_LOCAL_BRANCH ${GIT_LOCAL_BRANCH}"
				echo "GIT_PREVIOUS_COMMIT ${GIT_PREVIOUS_COMMIT}"
				echo "GIT_PREVIOUS_SUCCESSFUL_COMMIT ${GIT_PREVIOUS_SUCCESSFUL_COMMIT}"
				echo "GIT_URL ${GIT_URL}"
				echo "GIT_URL_N - ${GIT_URL_N}"
				echo "GIT_AUTHOR_NAME ${GIT_AUTHOR_NAME}"
				echo "GIT_COMMITTER_NAME ${GIT_COMMITTER_NAME}"
				echo "GIT_AUTHOR_EMAIL ${GIT_AUTHOR_EMAIL}"
				echo "GIT_COMMITTER_EMAIL ${GIT_COMMITTER_EMAIL}"
				'''
				
				// sh "curl -s -X POST https://api.telegram.org/bot5057295016:AAFWX5eitw9tKyiPtLB1FWYI3iVvP5Fmt4g/sendMessage -d chat_id='-1001721361023' -d parse_mode=markdown -d text='*${JOB_NAME}* : POC *Branch*: ${GIT_BRANCH} *Build* : OK *Published* = YES : result ${JOB_DISPLAY_URL} : git commit ${GIT_COMMIT}'"
            }
        }
		stage('parse json') {
			steps {
				// script {
					
					// def jsonSlurper = new JsonSlurper()
					def version = readJSON file: './package.json'
					// File fl = new File('pacage.json')
					// def obj = jsonSlurper.parse(version)
					echo version
				// }
			}
		}
		stage('nexus') {
			steps {
				script {
				// withCredentials([usernameColonPassword(credentialsId: 'nexus_admin_id', variable: 'NEXUS_CREDENTIALS')]) {
					nexusArtifactUploader(
						nexusVersion: 'nexus3',
						protocol: 'http',
						nexusUrl: '192.168.1.77:8081',
						groupId: BRANCH_NAME,
						version: BUILD_ID,
						repository: 'Raw_hosted_repo',
						credentialsId: NEXUS_CREDENTIAL_ID,
						artifacts: [
							[artifactId: 'nexus-artifact-uploader',
							classifier: 'debug',
							file: 'README.md',
							type: 'zip']
						]
					);
				}
			}
        }
  	}
	post {
		always {
        	echo "Stage finished"
			script {
    			TMSG = "*job name*= $JOB_NAME \n*git commit*= $GIT_COMMIT \n*result*= $JOB_DISPLAY_URL"
				echo  TMSG 
   			}
        }
		success {
			echo  "success " + TMSG 
			telegramSend(message: "*success*\n" + TMSG, chatId: -1001721361023)
		}
		aborted {   
			echo  "aborted " + TMSG           
			telegramSend(message: "*aborted* " + TMSG, chatId: -1001721361023)
		}
		failure {
			echo  "failure " + TMSG 
			telegramSend(message: "*failure* " + TMSG, chatId: -1001721361023)
		}
	}
}
